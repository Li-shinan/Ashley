this理解：
1.什么是this
this在任何情况下都不指向函数的词法作用域，因为this是在运行时进行绑定的，并不是在编译时绑定的，this的使用主要是解决显式的传参与调用。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式，当函数被调用，会有执行上下文(记录)，this就是记录的其中一个属性，也就是执行上下文中的一个属性是this，会在函数执行的过程中用到。
常常被误解，正确理解是既不指向函数自身也不指向函数的词法作用域，只有在函数被调用的时候发生绑定，指向谁完全取决这个函数在哪里被调用。
2.this全面解析
调用位置：函数被调用的位置，而不是定义声明的位置，并且需要理解调用栈，也就是调用的函数的先后；
绑定规则有4点：
 第一：就是默认，正常的在全局中声明函数并直接调用，但是函数只有运行在非strict mode下，默认绑定才会绑到全局对象，严格模式下与调用位置无关；
 第二：隐式绑定，重点在函数调用中的this绑定到这个上下文对象，对象属性引用链中只有最顶层或最后一层才会影响调用位置，例如obj1.obj2.foo(),this指向obj2,隐式绑定可能会出现隐式丢失问题；
 第三：显式绑定，例如call()\apply()，第一个参数就是this要指向的对象，装箱：参数是原始类型的，会自动转换它的对象形式，显式绑定中有个硬绑定，即绑定一次后怎样都无法修改，所以为了方便，提供了内置的方法Function.prototype.bind;
 第四：new绑定，1. 创建（或者说构造）一个全新的对象。2. 这个新对象会被执行 [[ 原型 ]] 连接。3. 这个新对象会绑定到函数调用的 this 。4. 如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。
bind(…) 的功能之一就是可以把除了第一个参数（第一个参数用于绑定 this ）之外的其他参数都传给下层的函数（这种技术称为“部分应用”，是“柯里化”的一种。
3.this绑定例外
如果函数不关心this，但是仍需要传入一个占位值，这时可以传null，但是这种会出现不知道难以预计的后果，所以一般会使用一个空对象，这样不会对全局对象产生任何影响，创建空对象Object.create(null)


